import numpy as np
import matplotlib.pyplot as plt

# Logistic map generator
def logistic_map(x, r):
    return r * x * (1 - x)  # Logistic map function

# Chebyshev map generator
def chebyshev_map(x, a):
    return a * x - x**3  # Chebyshev map function used for training the model

# Modulation using logistic map
def logistic_modulation(signal, data):
    modulated_signal = signal * data  # Modulate signal with data
    return modulated_signal

# Demodulation using logistic map
def logistic_demodulation(modulated_signal, chaotic_signal):
    recovered_signal = modulated_signal / chaotic_signal  # Demodulate the signal by dividing by chaotic signal
    return recovered_signal

# Modulation using Chebyshev map
def chebyshev_modulation(signal, data):
    modulated_signal = signal * data  # Modulate signal with data
    return modulated_signal

# Demodulation using a threshold
def chebyshev_demodulation(modulated_signal, threshold):
    recovered_signal = np.where(modulated_signal > threshold, 1, 0)  # Threshold-based demodulation
    return recovered_signal

# Example integer input data (replace with your data)
input_data = np.array([1, 0, 1, 1, 0, 1, 0, 0, 1, 0])  # Example integer data

# Generating a chaotic signal using logistic map with 1000 samples
n_samples = 1000
chaotic_signal_logistic = np.zeros(n_samples)
r = 3.9  # Logistic map parameter
x_logistic = 0.5  # Initial value for logistic map
for i in range(n_samples):
    chaotic_signal_logistic[i] = x_logistic
    x_logistic = logistic_map(x_logistic, r)

# Generating a chaotic signal using Chebyshev map with 1000 samples
chaotic_signal_chebyshev = np.zeros(n_samples)


a = 2.8  # Chebyshev map parameter
x_chebyshev = 0.5  # Initial value for Chebyshev map
for i in range(n_samples):
    chaotic_signal_chebyshev[i] = x_chebyshev
    x_chebyshev = chebyshev_map(x_chebyshev, a)

# Repeat or tile input_data to match the length of chaotic signal
tiled_input_data = np.tile(input_data, n_samples // len(input_data) + 1)[:n_samples]

# Modulate the chaotic signal generated by logistic map with the input data
modulated_signal_logistic = logistic_modulation(chaotic_signal_logistic, tiled_input_data)

# Demodulate the modulated signal obtained using logistic map
recovered_signal_logistic = np.round(logistic_demodulation(modulated_signal_logistic, chaotic_signal_logistic))
recovered_signal_logistic = recovered_signal_logistic.astype(int)  # Convert to integers

# Modulate the chaotic signal generated by Chebyshev map with the input data
modulated_signal_chebyshev = np.abs(chebyshev_modulation(chaotic_signal_chebyshev, tiled_input_data))

# Demodulate the modulated signal obtained using Chebyshev map
recovered_signal_chebyshev = chebyshev_demodulation(modulated_signal_chebyshev, threshold=0)

# Print the original input data and the recovered signals
print(chaotic_signal_logistic)
print(chaotic_signal_chebyshev)


plt.figure(figsize=(10, 6))
plt.subplot(2, 1, 1)
plt.plot(chaotic_signal_logistic, label='Logistic Map Chaotic Signal', color='blue')
plt.title('Chaotic Signals Generated by Logistic and Chebyshev Maps')
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(chaotic_signal_chebyshev, label='Chebyshev Map Chaotic Signal', color='green')
plt.xlabel('Sample Index')
plt.legend()

plt.tight_layout()
plt.show()

# Plot the modulated and recovered signals
plt.figure(figsize=(10, 6))
plt.subplot(2, 1, 1)
plt.plot(modulated_signal_logistic, label='Modulated Signal (Logistic)', color='orange')
plt.plot(recovered_signal_logistic, label='Recovered Signal (Logistic)', linestyle='dashed', color='red')
plt.title('Modulated and Recovered Signals (Logistic Map)')
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(modulated_signal_chebyshev, label='Modulated Signal (Chebyshev)', color='purple')
plt.plot(recovered_signal_chebyshev, label='Recovered Signal (Chebyshev)', linestyle='dashed', color='brown')
plt.xlabel('Sample Index')
plt.legend()

plt.tight_layout()
plt.show()

# Merge chaotic signals generated by logistic and Chebyshev maps
merged_chaotic_signal = chaotic_signal_logistic + chaotic_signal_chebyshev

# Plot the merged chaotic signal
plt.figure(figsize=(8, 4))
plt.plot(merged_chaotic_signal, label='Merged Chaotic Signal', color='purple')
plt.title('Merged Chaotic Signal')
plt.xlabel('Sample Index')
plt.legend()
plt.show()

# Modulate the merged chaotic signal with the input data
modulated_signal_merged = logistic_modulation(merged_chaotic_signal, tiled_input_data)

# Demodulate the modulated signal obtained using merged chaotic signal
recovered_signal_merged = np.round(logistic_demodulation(modulated_signal_merged, merged_chaotic_signal))
recovered_signal_merged = recovered_signal_merged.astype(int)  # Convert to integers

# Plot the modulated and recovered signals using the merged chaotic signal
plt.figure(figsize=(10, 6))
plt.subplot(2, 1, 1)
plt.plot(modulated_signal_merged, label='Modulated Signal (Merged Chaotic)', color='orange')
plt.title('Modulated and Recovered Signals (Merged Chaotic Signal)')
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(recovered_signal_merged, label='Recovered Signal (Merged Chaotic)', linestyle='dashed', color='red')
plt.xlabel('Sample Index')
plt.legend()

plt.tight_layout()
plt.show()

# Plot the original input data and the recovered signals
plt.figure(figsize=(10, 4))

# Original Input Data
plt.subplot(2, 1, 1)
plt.stem(input_data, label='Original Input Data', linefmt='b-', markerfmt='bo', basefmt=' ')

# Recovered Signals
plt.subplot(2, 1, 2)
plt.plot(recovered_signal_logistic, label='Recovered Signal (Logistic)', linestyle='dashed', color='red')
plt.plot(recovered_signal_chebyshev, label='Recovered Signal (Chebyshev)', linestyle='dashed', color='green')
plt.plot(recovered_signal_merged, label='Recovered Signal (Merged Chaotic)', linestyle='dashed', color='purple')

plt.xlabel('Sample Index')
plt.legend()

plt.tight_layout()
plt.show()
